---
title: "Introduction to data visualization"
author: "Reiko Okamoto"
format: html
editor: visual
---

## ‚è™ What did we discuss last time?

-   R is a language for statistical computing and graphics.

-   RStudio is a popular IDE for R.

-   GitHub is a platform allowing people to store and manage their code.

-   Packages contain code, documentation, and sample data in a standardized format that can be installed by users.

-   Tidyverse is a collection of popular packages designed for data science.

![](images/clipboard-1253734659.png)

## üçΩÔ∏è Today's menu

-   Introduction to ggplot2

-   Exploring the sample data

-   Histograms

-   Scatter plots

-   Bar plots

-   Changing colors

-   Line plots

-   Changing the look and feel

-   Other types of plots

-   Saving our masterpieces

## üñåÔ∏è Introduction to ggplot2 (1 min)

> ggplot2 is a system for declaratively creating graphics, based on¬†[The Grammar of Graphics](https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448/ref=as_li_ss_tl). You provide the data, tell ggplot2 how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.

--- [Create Elegant Data Visualisations Using the Grammar of Graphics ‚Ä¢ ggplot2](https://ggplot2.tidyverse.org/)

üì£ Load the package we'll be using:

```{r load-package}
# YOUR CODE GOES HERE
```

üí° You only need to install a package once, but you need to reload it every time you start a new session.

## üîç Exploring the sample data (3 min)

![](images/clipboard-3227188626.png)

-   Data originally comes from SNCF (La Soci√©t√© nationale des chemins de fer fran√ßais), France's national state-owned railway company.

-   We'll be using a modified version based on a CSV file from this [repository](https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-02-26).

üì£ Read the data:

```{r read-data}
# YOUR CODE GOES HERE
```

üì£ Inspect the data dictionary to explore the type and description of each variable:

| Variable                  | Type      | Description                           |
|-----------------------|------------------|-------------------------------|
| `year`                    | double    | Year of observation                   |
| `month`                   | double    | Month of observation                  |
| `service`                 | character | Type of train service                 |
| `departure_station`       | character | Departure station name                |
| `arrival_station`         | character | Arrival station name                  |
| `journey_time_avg`        | double    | Average journey time (min)            |
| `total_num_trips`         | double    | Total number of trains in time period |
| `avg_delay_all_departing` | double    | Average departure delay (min)         |
| `avg_delay_all_arriving`  | double    | Average arrival delay (min)           |
| `num_late_at_departure`   | double    | Number of trains departing late       |
| `num_arriving_late`       | double    | Number of trains arriving late        |

```{r inspect-data}
# YOUR CODE GOES HERE
```

-   Each row summarizes information on trips from one station to another for a given month and year:

    -   The first row captures information on trips from **AIX EN PROVENCE TGV** (Aix-en-Provence) to **PARIS LYON** (Paris-Gare-de-Lyon) for the month of **JANUARY 2015**.

    -   The last row captures information on trips from **ZURICH** to **PARIS LYON** for the month of **NOVEMBER 2018**.

## üìà Histogram (5 min)

üì£ Create a histogram to visualize the distribution of average journey time:

```{r histogram}
# YOUR CODE GOES HERE
```

-   We can see that the distribution of average journey time is right-skewed.

üí° Creating a plot is like building a layered cake: all plots start with a `ggplot()` call, supplying default data and aesthetics mappings via `aes()`. Next, you create layers using `geom_*` functions, adding components with `+`.

## üìà Scatter plot (15 min)

üì£ Create a scatter plot to visualize the relationship between average journey time and average arrival delay:

```{r scatter-plot}
# YOUR CODE GOES HERE
```

-   It looks as though the variance of delay increases as the average journey time increases. For journeys that average \<1 hour, arrival delays seem to be \<10 minutes. Meanwhile, for journeys that average 5 hours, arrival delays seem to be \<30 minutes.

üì£ Change the color and size of the points:

```{r scatter-plot-aes}
# YOUR CODE GOES HERE
```

üì£ Add title and change axis labels:

```{r change-labels}
# YOUR CODE GOES HERE
```

## üìà Bar plot (15 min)

![](images/clipboard-1657083407.png)

-   Gare du Nord, officially Paris-Nord, is the busiest railway station in Europe by total passenger numbers.

üì£ Create a bar plot to show the number of departures from Paris-Nord in 2015,¬†by destination:

```{r bar-plot}
# YOUR CODE GOES HERE
```

üì£ Create a horizontal bar plot:

```{r h-bar-plot}
# YOUR CODE GOES HERE
```

üì£ Create a grouped bar plot to compare the number of departures from Paris-Nord in 2015 and 2016, by destination:

```{r multi-bar-plot}
# YOUR CODE GOES HERE
```

## üé® Changing colors (10 min)

üì£ Change colors manually:

```{r change-fill-manual}
# YOUR CODE GOES HERE
```

üí° Use `scale_fill_manual()` for bar, box, and violin plots; use `scale_color_manual()` for scatter and line plots. We'll use the latter function in just a bit.

üì£ Change colors using the [RColorBrewer](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html) package:

```{r change-fill-brewer}
# YOUR CODE GOES HERE
```

üì£ An estimated 2.6 million Canadians are colorblind. Create a colorblind-friendly plot using the RColorBrewer package:

```{r change-fill-colorblind}
# YOUR CODE GOES HERE
```

## ‚è∏Ô∏è Break (10 min)

## üìà Line plot (5 min)

![](images/clipboard-3599526949.png)

-   Brest is a port city in Brittany, in northwestern France.

üì£ Create a line plot to show how the monthly number of trips from Paris to Brest fluctuates throughout the year:

```{r line-plot}
# YOUR CODE GOES HERE
```

## ‚úèÔ∏è Changing the look and feel (15 min)

üì£ Create a line plot to show how the monthly number of trips from Paris to multiple cities in Brittany fluctuate throughout the year:

-   Force the y-axis to start at 0

-   Add year-month labels to the x-axis and rotate them

-   Apply [pre-existing themes](https://ggplot2.tidyverse.org/reference/ggtheme.html)

-   Change elements that are specified by the theme

```{r multi-line-plot}
# YOUR CODE GOES HERE
```

-   *Why does Rennes have the most frequent service?*

    -   Trains departing from Paris often separate in Rennes (first part going to Brest and the latter going to Quimper).

    -   \# of trains to Rennes ‚âà \# of trains to Brest + \# of trains to Quimper

üí° Use [`scale_*_continuous()`](https://ggplot2.tidyverse.org/reference/scale_continuous.html) to position scales for continuous data, [`scale_*_discrete()`](https://ggplot2.tidyverse.org/reference/scale_discrete.html) to position scales for discrete data, and [`scale_*_date()`](https://ggplot2.tidyverse.org/reference/scale_date.html) to position scales for date data.

üí° Modify the theme to customize the non-data components of your plots (e.g., titles, labels, grid lines). Make sure to call `theme_minimal()` before `theme()` or else the modifications you have specified will be overwritten.

üì£ Save and apply our custom theme:

```{r apply-custom-theme}
# YOUR CODE GOES HERE
```

üí° A system like this allows us to reproducibly make the same changes across multiple plots with less typing!

## üìà Other types of plots (15 min)

üì£ Create a **box plot** to show the distribution of the monthly number of trips from Paris-Gare-de-Lyon for each international destination:

```{r box-plot}
# YOUR CODE GOES HERE
```

üì£ Change one line of code to visualize the distributions using a **violin plot**:

```{r violin-plot}
# YOUR CODE GOES HERE
```

> A violin plot is more informative than a plain box plot. While a box plot only shows summary statistics such as mean/median and interquartile ranges, the violin plot shows the full distribution of the data. The difference is particularly useful when the data distribution is multimodal (more than one peak).

--- [Violin plot - Wikipedia](https://en.wikipedia.org/wiki/Violin_plot#:~:text=A%20violin%20plot%20is%20more,(more%20than%20one%20peak).)

üì£ Create a line plot to show how the monthly number of trips from Paris to multiple cities in Brittany fluctuate over time. Use **facets** to organize multiple line plots into a panel (i.e., one plot for 2015, another for 2016, and so on):

```{r facets}
# YOUR CODE GOES HERE
```

üí° Organizing a sequence of panels in this fashion might be an appropriate use of screen space in some cases.

## üíæ Saving our masterpieces (3 min)

```{r ggsave}
# YOUR CODE GOES HERE
```

üí° By default, if you don't specify the `plot` argument, the function will save the last plot displayed.

## üìö References

-   ‚≠ê[From data to Viz \| Find the graphic you need (data-to-viz.com)](https://www.data-to-viz.com/)
-   ‚≠ê[Be Awesome in ggplot2: A Practical Guide to be Highly Effective - R software and data visualization - Easy Guides - Wiki - STHDA](http://www.sthda.com/english/wiki/be-awesome-in-ggplot2-a-practical-guide-to-be-highly-effective-r-software-and-data-visualization)
-   [Function reference ‚Ä¢ ggplot2 (tidyverse.org)](https://ggplot2.tidyverse.org/reference/)
-   [Modify components of a theme --- theme ‚Ä¢ ggplot2 (tidyverse.org)](https://ggplot2.tidyverse.org/reference/theme.html)
-   [Get, set, and modify the active theme --- theme_get ‚Ä¢ ggplot2 (tidyverse.org)](https://ggplot2.tidyverse.org/reference/theme_get.html)
